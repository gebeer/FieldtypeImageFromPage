<?php

namespace ProcessWire;

/**
 * Fieldtype 'Image Picker' stores a reference to an image from another page from selected image in the associated InputfieldImageFromPage.
 * The image can be rendered in template files
 * In case of SVG the file contents can be rendered inline
 *
 * Â©2019 Gerhard Sitzmann
 *
 * ProcessWire 3.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FieldtypeImageFromPage extends Fieldtype
{

    /**
     * Return an array of module information
     *
     * @return array
     */
    public static function getModuleInfo()
    {
        return array(
            'title' => __('Image Reference From Another Page'),
            'version' => 005,
            'summary' => __('Fieldtype that stores a reference to a single image from another page'),
            'author' => 'Gerhard Sitzmann',
            'href' => '',
            'installs' => [
                'InputfieldImageFromPage',
                'ImageFromPageHookHelper'
            ],
            'requires' => [
                'PHP>=7.1.0',
                'ProcessWire>=3.0.120'
            ],
        );
    }

    /**
     * Include ImageFromPage class, which serves as the value for fields of type FieldtypeImageFromPage
     *
     */
    public function __construct()
    {
        // require_once(dirname(__FILE__) . '/ImageFromPage.php');
    }

    /**
     * Return all compatible Fieldtypes 
     * 
     * @param Field $field
     * @return null
     *
     */
    public function ___getCompatibleFieldtypes(Field $field)
    {
        // there are no other fieldtypes compatible with this one
        return null;
    }


    /**
     * Sanitize the value for runtime storage and return it.
     * @param Page $page
     * @param Field $field
     * @param string $value json string
     * @return string json string
     */
    public function sanitizeValue(Page $page, Field $field, $value)
    {
        // if it's not a json string, then return a json string with empty values
        $obj = json_decode($value);
        if(!isset($obj->pageid) && !isset($obj->filename)) return $this->toJson();

        $value = $this->wire('sanitizer')->text($value);

        return $value;
    }

    /**
     * Get a blank value used by this fieldtype
     * 
     * @param Page $page
     * @param Field $field
     * @return string json string
     *
     */
    public function getBlankValue(Page $page, Field $field)
    {
        return $this->toJson();
    }

    /**
     * Format value for output
     * @param Page $page
     * @param Field $field
     * @param string $value json string
     * @return mixed Pageimage|null
     *    
     */
    public function ___formatValue(Page $page, Field $field, $value)
    {
        $value = json_decode($value);
        if($value->filename && $value->pageid != 0) {
            $pageimage = $this->wire('pages')->get($value->pageid)->get($field->imagesfield)->getFile($value->filename);
            if ($pageimage && $pageimage instanceof Pageimage) {
                $this->addHookProperty("Pageimage::svgcontent", $this, 'addPropertySvgcontent');
                return $pageimage;
            }
        } 
        return null;
    }

    /**
     * converts values into json string
     *
     * @param integer $pageid
     * @param string $filename
     * @return string json string
     */
    public function toJson($pageid = 0, $filename = '') {
        return json_encode(array('pageid' => $pageid, 'filename' => $filename));
    }

    /**
     * Given a raw value (value as stored in database), return the value as it would appear in a Page object.
     *
     * @param Page $page
     * @param Field $field
     * @param array $value
     * @return string json string
     */
    public function ___wakeupValue(Page $page, Field $field, $value)
    {
        return $this->toJson($value['pageid'], $value['filename']);
    }

    /**
     * Given an 'awake' value, as set by wakeupValue(), convert the value back to a basic type for storage in database.
     *
     * @param Page $page
     * @param Field $field
     * @param string $value json string
     * @return array properties string filename, int pageid, data json string
     */
    public function ___sleepValue(Page $page, Field $field, $value)
    {

        $obj = json_decode($value);

        $filename = $this->wire('sanitizer')->string($obj->filename);
        $pageid = $this->wire('sanitizer')->string($obj->pageid);

        $sleepValue = array(
            'filename' => $filename,
            'pageid' => $pageid,
            'data' => $this->toJson($pageid, $filename)
        );
        
        return $sleepValue;
    }

    /**
     * Return stripped file contents (only for svg)
     * returns only the <svg> node from the svg document sincs this is all we need to inline an svg
     * @param Pageimage $image
     * @return mixed string|null
     * @throws WireException
     */
    public function getFileContent(Pageimage $image)
    {
        $mimeTypes = ['image/svg', 'image/svg+xml'];
        if (strtolower($image->ext) !== 'svg' || !in_array($this->getFileMimetype($image), $mimeTypes)) {
            return null;
        } else {
            $doc = new \DOMDocument;
            $doc->loadXML(file_get_contents($image->filename));
            $xpath = new \DOMXPath($doc);
            $xpath->registerNamespace('svg', 'http://www.w3.org/2000/svg');
            $svg = $xpath->query('/svg:svg')->item(0);
            if ($svg) {
                return $doc->saveXML($svg);
            } else {
                $fileUrl = $this->getFileUrl($field, $value);
                throw new WireException("The SVG file at {$fileUrl} seems corrupt. Could not find SVG tag in file");
            }
        }
    }

    /**
     * Return file mime type
     * @param Pageimage $image
     * @return string 
     */
    public function getFileMimetype(Pageimage $image)
    {
        return mime_content_type($image->filename);
    }

    /**
     * Hook function for adding custom property 'svgcontent' to a PageImage object 
     *
     * @param Hookevent $event
     * @return string svg markup
     */
    public function ___addPropertySvgcontent(Hookevent $event)
    {
        $event->return = $this->getFileContent($event->object);
    }

    /**
     * Return new instance of the Inputfield associated with this Fieldtype
     *
     * @param Page $page
     * @param Field $field
     * @return Inputfield
     *
     */
    public function getInputfield(Page $page, Field $field)
    {
        $inputfield = $this->modules->get('InputfieldImageFromPage');
        $inputfield->set('folderPath', $field->folderPath);
        $inputfield->set('previewWidth', $field->previewWidth);
        $inputfield->set('thumbWidth', $field->thumbWidth);
        $inputfield->set('imagespage', $field->imagespage);
        $inputfield->set('imagesfield', $field->imagesfield);
        $inputfield->set('includechildren', $field->includechildren);
        $inputfield->set('useajax', $field->useajax);
        return $inputfield;
    }

    /**
     * Return the database schema in specified format
     * 
     * @param Field $field
     * @return array
     *
     */
    public function getDatabaseSchema(Field $field)
    {

        // get the default schema
        $schema = parent::getDatabaseSchema($field);

        $schema['data'] = "JSON NOT NULL";     // json string (reusing the 'data' field from default schema)
        $schema['pageid'] = "INT NOT NULL";    // page id of page that holds the referenced image
        $schema['filename'] = "VARCHAR(255) NOT NULL";     // image filename without path 

        // $schema['keys']['data'] = 'FULLTEXT KEY `data` (`data`)';
        $schema['keys']['data'] = 'KEY `data` (`data`)';
        $schema['keys']['pageid'] = "KEY pageid (pageid)";
        $schema['keys']['filename'] = 'FULLTEXT KEY `filename` (`filename`)';
        if ($field->id) $this->updateDatabaseSchema($field, $schema);
        
        return $schema;
    }
    
    /**
     * Update the DB schema, if necessary
     * 
     * @param Field $field
     * @param array $schema
     *
     */
    protected function updateDatabaseSchema(Field $field, array $schema)
    {

        $requiredVersion = 2;
        $schemaVersion = (int) $field->get('schemaVersion');
        bd($schemaVersion);
        if ($schemaVersion >= $requiredVersion) {
            // already up-to-date
            return;
        }
        if ($schemaVersion == 1) {
            /**
             * update schema to v2: 
             * add 'filename' column
             * copy values from data to filename
             * update column data with json string
             */
            // 	
            $schemaVersion = 2;
            $database = $this->wire('database');
            $table = $database->escapeTable($field->getTable());
            $query = $database->prepare("SHOW TABLES LIKE '$table'");
            $query->execute();
            $row = $query->fetch(\PDO::FETCH_NUM);
            $query->closeCursor();
            bd($row);
            if (!empty($row)) {
                $query = $database->prepare("SHOW COLUMNS FROM `$table` WHERE field='filename'");
                $query->execute();
                if (!$query->rowCount()) try {
                    $database->exec("ALTER TABLE `$table` ADD `filename` $schema[filename] AFTER pageid");
                    $this->message("Added 'filename' column to '$field->table'");
                    $database->exec("UPDATE `$table` SET filename=data");
                    $this->message("copied 'data' values to 'filename' column");
                    $database->exec("ALTER TABLE `$table` DROP KEY data");
                    $database->exec("ALTER TABLE `$table` DROP INDEX `data_2`");
                    $database->exec("ALTER TABLE `$table` DROP DEFAULT");
                    $database->exec("ALTER TABLE `$table` MODIFY data JSON NOT NULL");
                    $this->message("updated 'data' schema to JSON NOT NULL");
                    // $database->exec("UPDATE `$table` SET data=CONCAT('{\"pageid\":', `$table`.pageid, ',\"filename\":\"', `$table`.filename, '\"}')");
                    $database->exec("UPDATE `$table` SET data=CONCAT(JSON_OBJECT(\"pageid\", `$table`.pageid, \"filename\", `$table`.filename))");
                    $this->message("updated 'data' column with json string");
                } catch (\Exception $e) {
                    $this->error($e->getMessage());
                }
            }
        }

        $field->set('schemaVersion', $schemaVersion);
        $field->save();
    }

    /**
     * Match values for PageFinder
     * 
     * @param DatabaseQuerySelect $query
     * @param string $table
     * @param string $subfield
     * @param string $operator
     * @param string $value
     * @return DatabaseQuerySelect
     *
     */
    public function getMatchQuery($query, $table, $subfield, $operator, $value)
    {
        if (!$subfield || $subfield = 'value') $subfield = 'data';
        if ($subfield != 'data' || $this->wire('database')->isOperator($operator)) {
            // if dealing with something other than filename, or operator is native to SQL,
            // then let Fieldtype::getMatchQuery handle it instead
            return parent::getMatchQuery($query, $table, $subfield, $operator, $value);
        }
        // if we get here, then we're performing either %= (LIKE and variations) or *= (FULLTEXT and variations)
        $ft = new DatabaseQuerySelectFulltext($query);
        $ft->match($table, $subfield, $operator, $value);
        return $query;
    }

    /**
     * Get the inputfield used for configuration of this Fieldtype.
     *
     * @param Field $field
     * @return InputfieldWrapper
     *
     */
    public function ___getConfigInputfields(Field $field)
    {
        $errorimgpage = false;
        if ($field->imagespage) {
            $hasImagefield = false;
            $imagespage = $this->pages->get("id={$field->imagespage}, include=hidden");
            foreach ($imagespage->fieldgroup as $f) {
                if ($f->type instanceof FieldtypeImage) {
                    $hasImagefield = true;
                    break;
                }
            }
            if (!$hasImagefield) {
                $errorimgpage = $this->_("The selected page has no field for images. Choose a page with images field or add an images field to this page's template");
            }
        }

        $inputfields = parent::___getConfigInputfields($field);

        $f = $this->modules->get('InputfieldPageListSelect');
        $f->attr('name', 'imagespage');
        $f->parent_id = 0; // 0 to include homepage
        $f->label = $this->_("Choose a page to get images from");
        $f->description = $this->_("This page and it's child pages will be used to supply images");
        $f->attr('value', $field->imagespage);
        $f->required(1);
        $f->getErrors(true);
        if ($errorimgpage) $f->error($errorimgpage);
        $inputfields->add($f);

        if (!$errorimgpage) {
            $f = $this->modules->get('InputfieldRadios');
            $f->attr('name', 'imagesfield');
            $f->optionColumns = 1;
            if($field->imagespage) {
                $f->label = $this->_("Choose an images field on the template of the page above");
                $f->required(1);
                $fields = array_filter($imagespage->fieldgroup->getArray(), function ($field) {
                    return $field->type instanceof FieldtypeImage;
                });
                $options = array();
                foreach ($fields as $fd) $options[$fd->name] = $fd->name;
                $f->options = $options;
                $f->attr('value', $field->imagesfield);
            } else {
                $f->label = $this->_("You must submit changes to the field above first");
            }

            $inputfields->add($f);
        }

        $f = $this->modules->get('InputfieldCheckbox');
        $f->attr('name', 'includechildren');
        $f->label = $this->_("Include child pages of above page as source for images?");
        $f->description = $this->_('If checked, all child pages of above page will serve images to the inputfield');
        $f->attr('checked', $field->includechildren ? 'checked' : '');
        $f->attr('value', $field->includechildren);
        $inputfields->add($f);

        $f = $this->modules->get('InputfieldText');
        $f->attr('name', 'previewWidth');
        $f->label = $this->_("Width of the selected image in px");
        $f->description = $this->_('Sets the width of the selected image inside the inputfield, defaults to 200px');
        $f->attr('value', $field->previewWidth);
        $inputfields->add($f);

        $f = $this->modules->get('InputfieldText');
        $f->attr('name', 'thumbWidth');
        $f->label = $this->_("Width of thumbnail images in px");
        $f->description = $this->_('Sets the width of the thumbnail images inside the input field, defaults to 100px');
        $f->attr('value', $field->thumbWidth);
        $inputfields->add($f);

        $f = $this->modules->get('InputfieldCheckbox');
        $f->attr('name', 'useajax');
        $f->label = $this->_("Load thumbnails dynamically only when requested");
        $f->description = $this->_('If checked, the thumbnail images will be loaded on demand. Especially useful when field is used inside repeaters or has many images');
        $f->attr('checked', $field->useajax ? 'checked' : '');
        $f->attr('value', $field->useajax);
        $inputfields->add($f);

        $f = $this->modules->get('InputfieldMarkup');
        $f->attr('name', 'FieldtypeImageFromPage_instructions');
        $f->label = $this->_("How to use this field in a template");
        $f->attr('value', '<code>&lt;img src="&lt;?= $page->' . $field->name . '->url ?&gt;"&gt; // renders the image<br>
        $page->' . $field->name . '->svgcontent // returns the text content for inlining SVG (works only with SVG images)<br><br>
        All properties and methods for Pageimage can be used (resizing, cropping etc.)<br>
        $thumb = $page->' . $field->name . '->width(100)<br><br>
        Field is fully searchable for image filename by API<br>
        $pages->find("' . $field->name . '.filename=xyz.png")
        </code>');
        $inputfields->add($f);

        return $inputfields;
    }
}
